{{ if .Values.plugin.stonith.enable }}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-stonith
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/component: stonith
    {{- include "helm.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: stonith
      {{- include "helm.selector.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: stonith
        {{- include "helm.labels" . | nindent 8 }}
    spec:
      tolerations:
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: {{ .Values.plugin.stonith.selfEvacuateTimeoutSeconds | int }}
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: {{ .Values.plugin.stonith.selfEvacuateTimeoutSeconds | int }}
      priorityClassName: system-cluster-critical
      serviceAccountName: {{ .Release.Name }}-stonith-sa
      containers:
        #######################################################################
        - name: csi-zadara-stonith
          image: "{{ .Values.image.csiDriver.repository }}:{{ .Values.image.csiDriver.tag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          args:
            - "stonith"
            - "--use-tls={{ .Values.vpsa.useTLS }}"
            - "--verify-tls={{ .Values.vpsa.verifyTLS }}"
            - "--csi-name={{ .Values.plugin.provisioner }}"
            - "--probe-period={{ .Values.plugin.stonith.probePeriod }}"
            - "--probe-timeout={{ .Values.plugin.stonith.probeTimeout }}"
          env:
            - name: VPSA_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-vpsa-access-token
                  key: access-token
            - name: VPSA_HOSTNAME
              value: "{{ .Values.vpsa.url }}"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: config-dir
              mountPath: /etc/csi
            {{- if .Values.customTrustedCertificates }}
            - name: cert-dir
              mountPath: /etc/pki/ca-trust/source/anchors
            {{- end }}
      volumes:
        - name: config-dir
          configMap:
            name: {{ .Release.Name }}-config-map
        {{- if .Values.customTrustedCertificates }}
        - name: cert-dir
          secret:
        {{- if .Values.customTrustedCertificates.plainText }}
            secretName: {{ .Release.Name }}-custom-tls-cert
        {{- end }}
        {{- if .Values.customTrustedCertificates.existingSecret }}
            secretName: {{ .Values.customTrustedCertificates.existingSecret }}
        {{- end }}
        {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
{{- end }}
