---
{{- if .Values.plugin.autoExpandSupport }}
# Kubernetes 1.8: Beta
# Kubernetes 1.21: GA
{{- if .Capabilities.APIVersions.Has "batch/v1/CronJob" }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: {{ .Release.Name }}-csi-autoexpand-sync
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/component: expander
    {{- include "helm.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.plugin.autoExpandSupport.schedule }}"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 2
  # Running Job of this CronJob will prevent new Jobs from starting
  concurrencyPolicy: Forbid
  # Do not start the Job if it misses scheduled time by startingDeadlineSeconds for any reason.
  # Optimally should be close to the interval of schedule.
  startingDeadlineSeconds: 1200
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/component: expander
        {{- include "helm.labels" . | nindent 8 }}
    spec:
      # If Pod of the Job failed: Deadline Exceed (activeDeadlineSeconds), or Client errors,
      # it will run again up to backoffLimit times.
      backoffLimit: 1
      template:
        metadata:
          labels:
            app.kubernetes.io/component: expander
            {{- include "helm.labels" . | nindent 12 }}
        spec:
          # Let Job controller manage Pod restarts
          restartPolicy: Never
          # Pod will be killed, if not completed in activeDeadlineSeconds
          activeDeadlineSeconds: 60
          serviceAccountName: {{ .Release.Name }}-csi-zadara-expander-sa
          containers:
            - name: csi-zadara-expander
              image: "{{ .Values.image.csiDriver.repository }}:{{ .Values.image.csiDriver.tag }}"
              imagePullPolicy: "{{ .Values.imagePullPolicy }}"
              args:
                - "expander"
                - "--hostname={{ .Values.vpsa.url }}"
                - "--use-tls={{ .Values.vpsa.useTLS }}"
                - "--verify-tls={{ .Values.vpsa.verifyTLS }}"
              env:
                - name: VPSA_ACCESS_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-vpsa-access-token
                      key: access-token
              volumeMounts:
                - name: config-dir
                  mountPath: /etc/csi
                {{- if .Values.customTrustedCertificates }}
                - name: cert-dir
                  mountPath: /etc/pki/ca-trust/source/anchors
                {{- end }}
          volumes:
            - name: config-dir
              configMap:
                name: {{ .Release.Name }}-csi-config-map
            {{- if .Values.customTrustedCertificates }}
            - name: cert-dir
              secret:
            {{- if .Values.customTrustedCertificates.plainText }}
                secretName: {{ .Release.Name }}-custom-tls-cert
            {{- end }}
            {{- if .Values.customTrustedCertificates.existingSecret }}
                secretName: {{ .Values.customTrustedCertificates.existingSecret }}
            {{- end }}
            {{- end }}
          {{- if .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- range .Values.imagePullSecrets }}
            - name: {{ . }}
            {{- end }}
          {{- end }}
{{ end -}}
