---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-node
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/component: node
    {{- include "helm.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: node
      {{- include "helm.selector.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: node
        {{- include "helm.labels" . | nindent 8 }}
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: {{ .Release.Name }}-node-sa
      containers:
        #######################################################################
        - name: csi-node-driver-registrar
          image: "{{ .Values.image.nodeDriverRegistrar.repository }}:{{ .Values.image.nodeDriverRegistrar.tag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          args:
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
            - "--v=5"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/{{ .Values.plugin.provisioner }}/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
        #######################################################################
        - name: liveness-probe
          image: "{{ .Values.image.livenessProbe.repository }}:{{ .Values.image.livenessProbe.tag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          args:
            - "--csi-address=/csi/csi.sock"
            - "--health-port=9808"
            - "--probe-timeout=3s"
            - "--v=5"
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
        #######################################################################
        - name: csi-zadara-driver
          image: "{{ .Values.image.csiDriver.repository }}:{{ .Values.image.csiDriver.tag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          args:
            - "zadara-csi"
            - "--hostname={{ .Values.vpsa.url }}"
            - "--use-tls={{ .Values.vpsa.useTLS }}"
            - "--verify-tls={{ .Values.vpsa.verifyTLS }}"
            - "--name={{ .Values.plugin.provisioner }}"
            - "--endpoint=unix:///csi/csi.sock"
          env:
            - name: VPSA_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-vpsa-access-token
                  key: access-token
            - name: ISCSIADM_MODE
              value: "{{ .Values.plugin.iscsiMode }}"
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 10
            failureThreshold: 5
          ports:
            - name: healthz
              containerPort: 9808
              protocol: TCP
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            {{- if eq .Values.plugin.iscsiMode "rootfs" }}
            - name: host-root
              mountPath: /host
            {{ end -}}
            {{- if eq .Values.plugin.iscsiMode "client-server" }}
            - name: iscsi-socket
              mountPath: /iscsi-socket/iscsi.sock
            {{ end -}}
            - name: iscsi-initiator-name
              mountPath: /etc/iscsi/initiatorname.iscsi
            - name: socket-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
            - name: config-dir
              mountPath: /etc/csi
            {{- if .Values.customTrustedCertificates }}
            - name: cert-dir
              mountPath: /etc/pki/ca-trust/source/anchors
            {{- end }}
      volumes:
        {{- if eq .Values.plugin.iscsiMode "rootfs" }}
        - name: host-root
          hostPath:
            path: /
        {{ end -}}
        {{- if eq .Values.plugin.iscsiMode "client-server" }}
        - name: iscsi-socket
          hostPath:
            path: /var/zadara/csi-iscsi.sock
            type: FileOrCreate
        {{ end -}}
        - name: iscsi-initiator-name
          hostPath:
            path: /etc/iscsi/initiatorname.iscsi
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/{{ .Values.plugin.provisioner }}
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        - name: config-dir
          configMap:
            name: {{ .Release.Name }}-config-map
        {{- if .Values.customTrustedCertificates }}
        - name: cert-dir
          secret:
        {{- if .Values.customTrustedCertificates.plainText }}
            secretName: {{ .Release.Name }}-custom-tls-cert
        {{- end }}
        {{- if .Values.customTrustedCertificates.existingSecret }}
            secretName: {{ .Values.customTrustedCertificates.existingSecret }}
        {{- end }}
        {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
